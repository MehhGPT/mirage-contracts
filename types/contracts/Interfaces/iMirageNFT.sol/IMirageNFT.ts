/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IMirageNFT {
  export type PageStructStruct = {
    StoryId: BigNumberish;
    CreatorAddress: AddressLike;
    PageId: BigNumberish;
    ParentPageId: BigNumberish;
    SiblingPages: BigNumberish[];
  };

  export type PageStructStructOutput = [
    StoryId: bigint,
    CreatorAddress: string,
    PageId: bigint,
    ParentPageId: bigint,
    SiblingPages: bigint[]
  ] & {
    StoryId: bigint;
    CreatorAddress: string;
    PageId: bigint;
    ParentPageId: bigint;
    SiblingPages: bigint[];
  };
}

export interface IMirageNFTInterface extends Interface {
  getFunction(
    nameOrSignature: "getPageMetadata" | "mintPage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPageMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPage",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPageMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintPage", data: BytesLike): Result;
}

export interface IMirageNFT extends BaseContract {
  connect(runner?: ContractRunner | null): IMirageNFT;
  waitForDeployment(): Promise<this>;

  interface: IMirageNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPageMetadata: TypedContractMethod<
    [pageId: BigNumberish],
    [IMirageNFT.PageStructStructOutput],
    "view"
  >;

  mintPage: TypedContractMethod<
    [to: AddressLike, parentPageId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPageMetadata"
  ): TypedContractMethod<
    [pageId: BigNumberish],
    [IMirageNFT.PageStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintPage"
  ): TypedContractMethod<
    [to: AddressLike, parentPageId: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
