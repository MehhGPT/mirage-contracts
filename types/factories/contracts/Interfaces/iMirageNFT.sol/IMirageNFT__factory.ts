/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMirageNFT,
  IMirageNFTInterface,
} from "../../../../contracts/Interfaces/iMirageNFT.sol/IMirageNFT";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pageId",
        type: "uint256",
      },
    ],
    name: "getPageMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "StoryId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "CreatorAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "PageId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ParentPageId",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "SiblingPages",
            type: "uint256[]",
          },
        ],
        internalType: "struct IMirageNFT.PageStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "parentPageId",
        type: "uint256",
      },
    ],
    name: "mintPage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IMirageNFT__factory {
  static readonly abi = _abi;
  static createInterface(): IMirageNFTInterface {
    return new Interface(_abi) as IMirageNFTInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IMirageNFT {
    return new Contract(address, _abi, runner) as unknown as IMirageNFT;
  }
}
